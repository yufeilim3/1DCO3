/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    input [23:0] io_dip,
    output reg [23:0] io_led,
    input [4:0] io_button,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel
  );
  
  
  
  reg rst;
  
  reg [7:0] aluoutput;
  
  localparam DELAY = 5'h1c;
  
  localparam CONTINUE = 1'h0;
  
  localparam COUNTERBIT = 5'h1d;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  localparam STATEZERO_state = 6'd0;
  localparam ADDER_state = 6'd1;
  localparam BOOLEAN_state = 6'd2;
  localparam SHIFTER_state = 6'd3;
  localparam CMP_state = 6'd4;
  localparam A_ADD_state = 6'd5;
  localparam A_ADDOVF_state = 6'd6;
  localparam A_SUB_state = 6'd7;
  localparam A_MULT_state = 6'd8;
  localparam A_ZERO_state = 6'd9;
  localparam A_ERRTEST_state = 6'd10;
  localparam A_ERR_state = 6'd11;
  localparam B_NONE_state = 6'd12;
  localparam B_NOR_state = 6'd13;
  localparam B_ANOTB_state = 6'd14;
  localparam B_NOTB_state = 6'd15;
  localparam B_BNOTA_state = 6'd16;
  localparam B_NOTA_state = 6'd17;
  localparam B_XOR_state = 6'd18;
  localparam B_NAND_state = 6'd19;
  localparam B_AND_state = 6'd20;
  localparam B_XNOR_state = 6'd21;
  localparam B_A_state = 6'd22;
  localparam B_AORNB_state = 6'd23;
  localparam B_B_state = 6'd24;
  localparam B_BORNA_state = 6'd25;
  localparam B_OR_state = 6'd26;
  localparam B_ALL_state = 6'd27;
  localparam B_ERRTEST_state = 6'd28;
  localparam B_ERR_state = 6'd29;
  localparam S_SL_state = 6'd30;
  localparam S_SR_state = 6'd31;
  localparam S_SRA_state = 6'd32;
  localparam S_ERRTEST_state = 6'd33;
  localparam S_ERR_state = 6'd34;
  localparam C_EQ_state = 6'd35;
  localparam C_EQF_state = 6'd36;
  localparam C_LT_state = 6'd37;
  localparam C_LTF_state = 6'd38;
  localparam C_LTEQE_state = 6'd39;
  localparam C_LTEQL_state = 6'd40;
  localparam C_LTEQF_state = 6'd41;
  localparam C_ERRTEST_state = 6'd42;
  localparam C_ERR_state = 6'd43;
  
  reg [5:0] M_state_d, M_state_q = STATEZERO_state;
  reg [28:0] M_counter_d, M_counter_q = 1'h0;
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_2 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  wire [1-1:0] M_myalu_z;
  wire [1-1:0] M_myalu_v;
  wire [1-1:0] M_myalu_n;
  wire [8-1:0] M_myalu_out;
  reg [8-1:0] M_myalu_a;
  reg [8-1:0] M_myalu_b;
  reg [6-1:0] M_myalu_alufn;
  alu8bit_3 myalu (
    .a(M_myalu_a),
    .b(M_myalu_b),
    .alufn(M_myalu_alufn),
    .z(M_myalu_z),
    .v(M_myalu_v),
    .n(M_myalu_n),
    .out(M_myalu_out)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    M_seg_values = 16'hdddd;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    M_myalu_a = 2'h0;
    M_myalu_b = 2'h0;
    M_myalu_alufn = 6'h00;
    
    case (M_state_q)
      STATEZERO_state: begin
        io_led = 24'h000000;
        M_counter_d = 1'h0;
        M_seg_values = 16'hdddd;
        if (io_button[0+0-:1] == 1'h1) begin
          M_state_d = ADDER_state;
        end
        if (io_button[3+0-:1] == 1'h1) begin
          M_state_d = BOOLEAN_state;
        end
        if (io_button[2+0-:1] == 1'h1) begin
          M_state_d = SHIFTER_state;
        end
        if (io_button[4+0-:1] == 1'h1) begin
          M_state_d = CMP_state;
        end
        if (io_button[1+0-:1] == 1'h1) begin
          M_state_d = A_ADD_state;
        end
      end
      ADDER_state: begin
        M_myalu_a = io_dip[16+7-:8];
        M_myalu_b = io_dip[8+7-:8];
        M_myalu_alufn = io_dip[0+0+5-:6];
        io_led[0+7-:8] = M_myalu_out;
        io_led[8+0+0-:1] = M_myalu_n;
        io_led[8+1+0-:1] = M_myalu_v;
        io_led[8+2+0-:1] = M_myalu_z;
        M_seg_values = 16'hddda;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && io_dip[0+4+1-:2] == 2'h0) begin
          M_counter_d = 1'h0;
          M_state_d = STATEZERO_state;
        end else begin
          if (io_dip[0+4+1-:2] != 2'h0) begin
            io_led = 24'h000000;
            M_seg_values = 16'hceea;
            if (M_counter_q[28+0-:1] == 1'h1) begin
              M_counter_d = 1'h0;
              M_state_d = STATEZERO_state;
            end
          end
        end
      end
      BOOLEAN_state: begin
        M_myalu_a = io_dip[16+7-:8];
        M_myalu_b = io_dip[8+7-:8];
        M_myalu_alufn = io_dip[0+0+5-:6];
        io_led[0+7-:8] = M_myalu_out;
        M_seg_values = 16'hddd8;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && io_dip[0+4+1-:2] == 2'h1) begin
          M_counter_d = 1'h0;
          M_state_d = STATEZERO_state;
        end else begin
          if (io_dip[0+4+1-:2] != 2'h1) begin
            M_seg_values = 16'hcee8;
            if (M_counter_q[28+0-:1] == 1'h1) begin
              M_counter_d = 1'h0;
              M_state_d = STATEZERO_state;
            end
          end
        end
      end
      SHIFTER_state: begin
        M_myalu_a = io_dip[16+7-:8];
        M_myalu_b = io_dip[8+7-:8];
        M_myalu_alufn = io_dip[0+0+5-:6];
        io_led[0+7-:8] = M_myalu_out;
        M_seg_values = 16'hddd5;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && io_dip[0+4+1-:2] == 2'h2) begin
          M_counter_d = 1'h0;
          M_state_d = STATEZERO_state;
        end else begin
          if (io_dip[0+4+1-:2] != 2'h2) begin
            M_seg_values = 16'hcee5;
            if (M_counter_q[28+0-:1] == 1'h1) begin
              M_counter_d = 1'h0;
              M_state_d = STATEZERO_state;
            end
          end
        end
      end
      CMP_state: begin
        M_myalu_a = io_dip[16+7-:8];
        M_myalu_b = io_dip[8+7-:8];
        M_myalu_alufn = io_dip[0+0+5-:6];
        io_led[0+7-:8] = M_myalu_out;
        io_led[8+0+0-:1] = M_myalu_n;
        io_led[8+1+0-:1] = M_myalu_v;
        io_led[8+2+0-:1] = M_myalu_z;
        M_seg_values = 16'hdddb;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && io_dip[0+4+1-:2] == 2'h3) begin
          M_counter_d = 1'h0;
          M_state_d = STATEZERO_state;
        end else begin
          if (io_dip[0+4+1-:2] != 2'h3) begin
            M_seg_values = 16'hceeb;
            if (M_counter_q[28+0-:1] == 1'h1) begin
              M_counter_d = 1'h0;
              M_state_d = STATEZERO_state;
            end
          end
        end
      end
      A_ADD_state: begin
        M_myalu_a = 8'h04;
        M_myalu_b = 8'h06;
        M_myalu_alufn = 6'h00;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'h04;
        io_led[8+7-:8] = 8'h06;
        io_led[0+7-:8] = M_myalu_out;
        led[0+0-:1] = M_myalu_n;
        led[1+0-:1] = M_myalu_v;
        led[2+0-:1] = M_myalu_z;
        M_seg_values = 16'hddda;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'h0a && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = A_ADDOVF_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'h0a && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = A_ERR_state;
          end
        end
      end
      A_ADDOVF_state: begin
        M_myalu_a = 8'h40;
        M_myalu_b = 8'h40;
        M_myalu_alufn = 6'h00;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'h40;
        io_led[8+7-:8] = 8'h40;
        io_led[0+7-:8] = M_myalu_out;
        led[0+0-:1] = M_myalu_n;
        led[1+0-:1] = M_myalu_v;
        led[2+0-:1] = M_myalu_z;
        M_seg_values = 16'hddda;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'h80 && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = A_SUB_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'h80 && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = A_ERR_state;
          end
        end
      end
      A_SUB_state: begin
        M_myalu_a = 8'h20;
        M_myalu_b = 8'h10;
        M_myalu_alufn = 6'h01;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'h20;
        io_led[8+7-:8] = 8'h10;
        io_led[0+7-:8] = M_myalu_out;
        led[0+0-:1] = M_myalu_n;
        led[1+0-:1] = M_myalu_v;
        led[2+0-:1] = M_myalu_z;
        M_seg_values = 16'hddda;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'h10 && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = A_MULT_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'h10 && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = A_ERR_state;
          end
        end
      end
      A_MULT_state: begin
        M_myalu_a = 8'h02;
        M_myalu_b = 8'h10;
        M_myalu_alufn = 6'h02;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'h02;
        io_led[8+7-:8] = 8'h10;
        io_led[0+7-:8] = M_myalu_out;
        led[0+0-:1] = M_myalu_n;
        led[1+0-:1] = M_myalu_v;
        led[2+0-:1] = M_myalu_z;
        M_seg_values = 16'hddda;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'h20 && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = A_ZERO_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'h20 && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = A_ERR_state;
          end
        end
      end
      A_ZERO_state: begin
        M_myalu_a = 8'h00;
        M_myalu_b = 8'h00;
        M_myalu_alufn = 6'h00;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'h00;
        io_led[8+7-:8] = 8'h00;
        io_led[0+7-:8] = M_myalu_out;
        led[0+0-:1] = M_myalu_n;
        led[1+0-:1] = M_myalu_v;
        led[2+0-:1] = M_myalu_z;
        M_seg_values = 16'hddda;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'h00 && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = A_ERRTEST_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'h00 && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = A_ERR_state;
          end
        end
      end
      A_ERRTEST_state: begin
        M_myalu_a = 8'h04;
        M_myalu_b = 8'h06;
        M_myalu_alufn = 6'h00;
        aluoutput = M_myalu_out + 1'h1;
        io_led[16+7-:8] = 8'h04;
        io_led[8+7-:8] = 8'h06;
        io_led[0+7-:8] = M_myalu_out + 1'h1;
        led[0+0-:1] = M_myalu_n;
        led[1+0-:1] = M_myalu_v;
        led[2+0-:1] = M_myalu_z;
        M_seg_values = 16'hddda;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'h0a && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = B_NONE_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'h0a && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = A_ERR_state;
          end
        end
      end
      A_ERR_state: begin
        M_seg_values = 16'hceea;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = B_NONE_state;
        end
      end
      B_NONE_state: begin
        M_myalu_a = 8'h0a;
        M_myalu_b = 8'h0c;
        M_myalu_alufn = 6'h10;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'h0a;
        io_led[8+7-:8] = 8'h0c;
        io_led[0+7-:8] = M_myalu_out;
        M_seg_values = 16'hddd8;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'h00 && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = B_NOR_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'h00 && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = B_ERR_state;
          end
        end
      end
      B_NOR_state: begin
        M_myalu_a = 8'hfa;
        M_myalu_b = 8'hfc;
        M_myalu_alufn = 6'h11;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'hfa;
        io_led[8+7-:8] = 8'hfc;
        io_led[0+7-:8] = M_myalu_out;
        M_seg_values = 16'hddd8;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'h01 && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = B_ANOTB_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'h01 && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = B_ERR_state;
          end
        end
      end
      B_ANOTB_state: begin
        M_myalu_a = 8'haa;
        M_myalu_b = 8'hcc;
        M_myalu_alufn = 6'h12;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'haa;
        io_led[8+7-:8] = 8'hcc;
        io_led[0+7-:8] = M_myalu_out;
        M_seg_values = 16'hddd8;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'h22 && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = B_NOTB_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'h22 && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = B_ERR_state;
          end
        end
      end
      B_NOTB_state: begin
        M_myalu_a = 8'haa;
        M_myalu_b = 8'hcc;
        M_myalu_alufn = 6'h13;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'haa;
        io_led[8+7-:8] = 8'hcc;
        io_led[0+7-:8] = M_myalu_out;
        M_seg_values = 16'hddd8;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'h33 && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = B_BNOTA_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'h33 && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = B_ERR_state;
          end
        end
      end
      B_BNOTA_state: begin
        M_myalu_a = 8'haa;
        M_myalu_b = 8'hcc;
        M_myalu_alufn = 6'h14;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'haa;
        io_led[8+7-:8] = 8'hcc;
        io_led[0+7-:8] = M_myalu_out;
        M_seg_values = 16'hddd8;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'h44 && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = B_NOTA_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'h44 && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = B_ERR_state;
          end
        end
      end
      B_NOTA_state: begin
        M_myalu_a = 8'haa;
        M_myalu_b = 8'hcc;
        M_myalu_alufn = 6'h15;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'haa;
        io_led[8+7-:8] = 8'hcc;
        io_led[0+7-:8] = M_myalu_out;
        M_seg_values = 16'hddd8;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'h55 && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = B_XOR_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'h55 && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = B_ERR_state;
          end
        end
      end
      B_XOR_state: begin
        M_myalu_a = 8'haa;
        M_myalu_b = 8'hcc;
        M_myalu_alufn = 6'h16;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'haa;
        io_led[8+7-:8] = 8'hcc;
        io_led[0+7-:8] = M_myalu_out;
        M_seg_values = 16'hddd8;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'h66 && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = B_NAND_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'h66 && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = B_ERR_state;
          end
        end
      end
      B_NAND_state: begin
        M_myalu_a = 8'haa;
        M_myalu_b = 8'hcc;
        M_myalu_alufn = 6'h17;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'haa;
        io_led[8+7-:8] = 8'hcc;
        io_led[0+7-:8] = M_myalu_out;
        M_seg_values = 16'hddd8;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'h77 && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = B_AND_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'h77 && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = B_ERR_state;
          end
        end
      end
      B_AND_state: begin
        M_myalu_a = 8'haa;
        M_myalu_b = 8'hcc;
        M_myalu_alufn = 6'h18;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'haa;
        io_led[8+7-:8] = 8'hcc;
        io_led[0+7-:8] = M_myalu_out;
        M_seg_values = 16'hddd8;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'h88 && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = B_XNOR_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'h88 && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = B_ERR_state;
          end
        end
      end
      B_XNOR_state: begin
        M_myalu_a = 8'haa;
        M_myalu_b = 8'hcc;
        M_myalu_alufn = 6'h19;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'haa;
        io_led[8+7-:8] = 8'hcc;
        io_led[0+7-:8] = M_myalu_out;
        M_seg_values = 16'hddd8;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'h99 && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = B_A_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'h99 && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = B_ERR_state;
          end
        end
      end
      B_A_state: begin
        M_myalu_a = 8'haa;
        M_myalu_b = 8'hcc;
        M_myalu_alufn = 6'h1a;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'haa;
        io_led[8+7-:8] = 8'hcc;
        io_led[0+7-:8] = M_myalu_out;
        M_seg_values = 16'hddd8;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'haa && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = B_AORNB_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'haa && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = B_ERR_state;
          end
        end
      end
      B_AORNB_state: begin
        M_myalu_a = 8'haa;
        M_myalu_b = 8'hcc;
        M_myalu_alufn = 6'h1b;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'haa;
        io_led[8+7-:8] = 8'hcc;
        io_led[0+7-:8] = M_myalu_out;
        M_seg_values = 16'hddd8;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'hbb && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = B_B_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'hbb && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = B_ERR_state;
          end
        end
      end
      B_B_state: begin
        M_myalu_a = 8'haa;
        M_myalu_b = 8'hcc;
        M_myalu_alufn = 6'h1c;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'haa;
        io_led[8+7-:8] = 8'hcc;
        io_led[0+7-:8] = M_myalu_out;
        M_seg_values = 16'hddd8;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'hcc && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = B_BORNA_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'hcc && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = B_ERR_state;
          end
        end
      end
      B_BORNA_state: begin
        M_myalu_a = 8'haa;
        M_myalu_b = 8'hcc;
        M_myalu_alufn = 6'h1d;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'haa;
        io_led[8+7-:8] = 8'hcc;
        io_led[0+7-:8] = M_myalu_out;
        M_seg_values = 16'hddd8;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'hdd && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = B_OR_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'hdd && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = B_ERR_state;
          end
        end
      end
      B_OR_state: begin
        M_myalu_a = 8'haa;
        M_myalu_b = 8'hcc;
        M_myalu_alufn = 6'h1e;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'haa;
        io_led[8+7-:8] = 8'hcc;
        io_led[0+7-:8] = M_myalu_out;
        M_seg_values = 16'hddd8;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'hee && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = B_ALL_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'hee && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = B_ERR_state;
          end
        end
      end
      B_ALL_state: begin
        M_myalu_a = 8'haa;
        M_myalu_b = 8'hcc;
        M_myalu_alufn = 6'h1f;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'haa;
        io_led[8+7-:8] = 8'hcc;
        io_led[0+7-:8] = M_myalu_out;
        M_seg_values = 16'hddd8;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'hff && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = B_ERRTEST_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'hff && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = B_ERR_state;
          end
        end
      end
      B_ERRTEST_state: begin
        M_myalu_a = 8'haa;
        M_myalu_b = 8'hcc;
        M_myalu_alufn = 6'h1f;
        aluoutput = ~M_myalu_out;
        io_led[16+7-:8] = 8'haa;
        io_led[8+7-:8] = 8'hcc;
        io_led[0+7-:8] = ~M_myalu_out;
        M_seg_values = 16'hddd8;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'hff && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = S_SL_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'hff && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = B_ERR_state;
          end
        end
      end
      B_ERR_state: begin
        M_seg_values = 16'hcee8;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = S_SL_state;
        end
      end
      S_SL_state: begin
        M_myalu_a = 8'h0f;
        M_myalu_b = 8'h04;
        M_myalu_alufn = 6'h20;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'h0f;
        io_led[8+7-:8] = 8'h04;
        io_led[0+7-:8] = M_myalu_out;
        M_seg_values = 16'hddd5;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'hf0 && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = S_SR_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'hf0 && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = S_ERR_state;
          end
        end
      end
      S_SR_state: begin
        M_myalu_a = 8'h88;
        M_myalu_b = 8'h02;
        M_myalu_alufn = 6'h21;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'h88;
        io_led[8+7-:8] = 8'h02;
        io_led[0+7-:8] = M_myalu_out;
        M_seg_values = 16'hddd5;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'h22 && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = S_SRA_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'h22 && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = S_ERR_state;
          end
        end
      end
      S_SRA_state: begin
        M_myalu_a = 8'h88;
        M_myalu_b = 8'h02;
        M_myalu_alufn = 6'h23;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'h88;
        io_led[8+7-:8] = 8'h02;
        io_led[0+7-:8] = M_myalu_out;
        M_seg_values = 16'hddd5;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'he2 && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = S_ERRTEST_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'he2 && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = S_ERR_state;
          end
        end
      end
      S_ERRTEST_state: begin
        M_myalu_a = 8'h88;
        M_myalu_b = 8'h02;
        M_myalu_alufn = 6'h23;
        aluoutput = ~M_myalu_out;
        io_led[16+7-:8] = 8'h88;
        io_led[8+7-:8] = 8'h02;
        io_led[0+7-:8] = ~M_myalu_out;
        M_seg_values = 16'hddd5;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'he2 && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = C_EQ_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'he2 && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = S_ERR_state;
          end
        end
      end
      S_ERR_state: begin
        M_seg_values = 16'hcee5;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = C_EQ_state;
        end
      end
      C_EQ_state: begin
        M_myalu_a = 8'h99;
        M_myalu_b = 8'h99;
        M_myalu_alufn = 6'h33;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'h99;
        io_led[8+7-:8] = 8'h99;
        io_led[0+7-:8] = M_myalu_out;
        led[0+0-:1] = M_myalu_n;
        led[1+0-:1] = M_myalu_v;
        led[2+0-:1] = M_myalu_z;
        M_seg_values = 16'hdddb;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'h01 && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = C_EQF_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'h01 && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = C_ERR_state;
          end
        end
      end
      C_EQF_state: begin
        M_myalu_a = 8'h99;
        M_myalu_b = 8'h98;
        M_myalu_alufn = 6'h33;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'h99;
        io_led[8+7-:8] = 8'h98;
        io_led[0+7-:8] = M_myalu_out;
        led[0+0-:1] = M_myalu_n;
        led[1+0-:1] = M_myalu_v;
        led[2+0-:1] = M_myalu_z;
        M_seg_values = 16'hdddb;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'h00 && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = C_LT_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'h00 && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = C_ERR_state;
          end
        end
      end
      C_LT_state: begin
        M_myalu_a = 8'h10;
        M_myalu_b = 8'h18;
        M_myalu_alufn = 6'h35;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'h10;
        io_led[8+7-:8] = 8'h18;
        io_led[0+7-:8] = M_myalu_out;
        led[0+0-:1] = M_myalu_n;
        led[1+0-:1] = M_myalu_v;
        led[2+0-:1] = M_myalu_z;
        M_seg_values = 16'hdddb;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'h01 && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = C_LTF_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'h01 && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = C_ERR_state;
          end
        end
      end
      C_LTF_state: begin
        M_myalu_a = 8'h70;
        M_myalu_b = 8'h18;
        M_myalu_alufn = 6'h35;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'h70;
        io_led[8+7-:8] = 8'h18;
        io_led[0+7-:8] = M_myalu_out;
        led[0+0-:1] = M_myalu_n;
        led[1+0-:1] = M_myalu_v;
        led[2+0-:1] = M_myalu_z;
        M_seg_values = 16'hdddb;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'h00 && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = C_LTEQE_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'h00 && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = C_ERR_state;
          end
        end
      end
      C_LTEQE_state: begin
        M_myalu_a = 8'h0c;
        M_myalu_b = 8'h0c;
        M_myalu_alufn = 6'h37;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'h0c;
        io_led[8+7-:8] = 8'h0c;
        io_led[0+7-:8] = M_myalu_out;
        led[0+0-:1] = M_myalu_n;
        led[1+0-:1] = M_myalu_v;
        led[2+0-:1] = M_myalu_z;
        M_seg_values = 16'hdddb;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'h01 && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = C_LTEQL_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'h01 && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = C_ERR_state;
          end
        end
      end
      C_LTEQL_state: begin
        M_myalu_a = 8'h04;
        M_myalu_b = 8'h0c;
        M_myalu_alufn = 6'h37;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'h04;
        io_led[8+7-:8] = 8'h0c;
        io_led[0+7-:8] = M_myalu_out;
        led[0+0-:1] = M_myalu_n;
        led[1+0-:1] = M_myalu_v;
        led[2+0-:1] = M_myalu_z;
        M_seg_values = 16'hdddb;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'h01 && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = C_LTEQF_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'h01 && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = C_ERR_state;
          end
        end
      end
      C_LTEQF_state: begin
        M_myalu_a = 8'h1a;
        M_myalu_b = 8'h0c;
        M_myalu_alufn = 6'h37;
        aluoutput = M_myalu_out;
        io_led[16+7-:8] = 8'h1a;
        io_led[8+7-:8] = 8'h0c;
        io_led[0+7-:8] = M_myalu_out;
        led[0+0-:1] = M_myalu_n;
        led[1+0-:1] = M_myalu_v;
        led[2+0-:1] = M_myalu_z;
        M_seg_values = 16'hdddb;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'h00 && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = C_ERRTEST_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'h00 && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = C_ERR_state;
          end
        end
      end
      C_ERRTEST_state: begin
        M_myalu_a = 8'h99;
        M_myalu_b = 8'h99;
        M_myalu_alufn = 6'h33;
        aluoutput = ~M_myalu_out;
        io_led[16+7-:8] = 8'h99;
        io_led[8+7-:8] = 8'h99;
        io_led[0+7-:8] = ~M_myalu_out;
        led[0+0-:1] = M_myalu_n;
        led[1+0-:1] = M_myalu_v;
        led[2+0-:1] = M_myalu_z;
        M_seg_values = 16'hdddb;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && aluoutput == 8'h01 && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = STATEZERO_state;
        end else begin
          if (M_counter_q[28+0-:1] == 1'h1 && aluoutput != 8'h01 && io_button[1+0-:1] == 1'h0) begin
            M_counter_d = 1'h0;
            M_state_d = C_ERR_state;
          end
        end
      end
      C_ERR_state: begin
        M_seg_values = 16'hceeb;
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[28+0-:1] == 1'h1 && io_button[1+0-:1] == 1'h0) begin
          M_counter_d = 1'h0;
          M_state_d = STATEZERO_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
